from math import sqrt

def genPrimes(n):
    '''generate primes up to n'''
    numbers = [x for x in range(1, n+1)]
    marked = [True] * n
    # Use siv to eliminate non-primes
    for x in range(2, int(sqrt(n)+1)):
        if not marked[x-1]: continue
        factor = 2
        while x*factor-1 < n:
            marked[x*factor-1] = False
            factor += 1
    # Create prime list
    primes = []
    for i,v in enumerate(marked):
        if v: primes.append(numbers[i])
    return primes

def testQuadratic(a,b,siv):
    '''Returns the number of consecutive primes generated by the quadratic 
    formula defines as n^2 + an + b
    '''
    count = 0
    while True:
        n = count+1
        result = n*n + a*n + b
        if result in siv:
            count += 1
        else:
            return count
    
if __name__ == '__main__':
    print(genPrimes(100))